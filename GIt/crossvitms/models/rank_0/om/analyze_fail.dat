# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] construct_wrapper.1
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(231)/    def construct(self, x):/
funcgraph fg_1(
        %para1 : Tensor(F32)[3, 3, 192, 192]    # x
        , %para2 : Ref[Tensor(F32)][192]    # revert_projs.0.0.gamma
        , %para3 : Ref[Tensor(F32)][192]    # revert_projs.0.0.beta
        , %para4 : Ref[Tensor(F32)][192]    # revert_projs.0.2.bias
        , %para5 : Ref[Tensor(F32)][192, 192]    # revert_projs.0.2.weight
        , %para6 : Ref[Tensor(F32)][192]    # projs.0.0.gamma
        , %para7 : Ref[Tensor(F32)][192]    # projs.0.0.beta
        , %para8 : Ref[Tensor(F32)][192]    # blocks.0.0.norm2.gamma
        , %para9 : Ref[Tensor(F32)][192]    # blocks.0.0.norm2.beta
        , %para10 : Ref[Tensor(F32)][192]    # fusion.0.0.norm1.gamma
        , %para11 : Ref[Tensor(F32)][192]    # fusion.0.0.norm1.beta
        , %para12 : Ref[Tensor(F32)][192]    # blocks.0.0.norm1.gamma
        , %para13 : Ref[Tensor(F32)][192]    # blocks.0.0.norm1.beta
        , %para14 : Ref[Tensor(F32)][192]    # projs.0.2.bias
        , %para15 : Ref[Tensor(F32)][192, 192]    # projs.0.2.weight
        , %para16 : Ref[Tensor(F32)][192]    # blocks.0.0.mlp.fc2.bias
        , %para17 : Ref[Tensor(F32)][192, 384]    # blocks.0.0.mlp.fc2.weight
        , %para18 : Ref[Tensor(F32)][192]    # fusion.0.0.attn.proj.bias
        , %para19 : Ref[Tensor(F32)][192, 192]    # fusion.0.0.attn.proj.weight
        , %para20 : Ref[Tensor(F32)][192]    # blocks.0.0.attn.proj.bias
        , %para21 : Ref[Tensor(F32)][192, 192]    # blocks.0.0.attn.proj.weight
        , %para22 : Ref[Tensor(F32)][384]    # blocks.0.0.mlp.fc1.bias
        , %para23 : Ref[Tensor(F32)][384, 192]    # blocks.0.0.mlp.fc1.weight
        , %para24 : Ref[Tensor(F32)][192, 192]    # fusion.0.0.attn.wv.weight
        , %para25 : Ref[Tensor(F32)][192, 192]    # fusion.0.0.attn.wk.weight
        , %para26 : Ref[Tensor(F32)][192, 192]    # fusion.0.0.attn.wq.weight
        , %para27 : Ref[Tensor(F32)][576, 192]    # blocks.0.0.attn.qkv.weight
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_18(%para1)    #(Tensor(F32)[3, 3, 192, 192])    # fg_18=construct.18 #scope: Default
#[CNode]35
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]36
}
# order:
#   1: construct_wrapper.1:[CNode]35{[0]: ValueNode<FuncGraph> construct.18, [1]: x}
#   2: construct_wrapper.1:[CNode]36{[0]: ValueNode<Primitive> Return, [1]: [CNode]35}


# [No.2] construct.18
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(231)/    def construct(self, x):/
funcgraph fg_18[fg_1](
        %para28 : Tensor(F32)[3, 3, 192, 192]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_19(I64(0), [])    #(I64, List[])    # fg_19=⤾construct.19 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]37
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]38
}
# order:
#   1: construct.18:[CNode]39{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_list, [1]: x}
#   2: construct.18:[CNode]40{[0]: ValueNode<DoSignaturePrimitive> S-Prim-zip_operation, [1]: [CNode]39, [2]: [CNode]41}
#   3: construct.18:Φouts_b{[0]: ValueNode<FuncGraph> G-construct.23}
#   4: construct.18:[CNode]42{[0]: ValueNode<DoSignaturePrimitive> S-Prim-zip_operation, [1]: Φouts_b, [2]: [CNode]43}
#   5: construct.18:Φproj_cls_token{[0]: ValueNode<FuncGraph> G-construct.22}
#   6: construct.18:[CNode]44{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_range, [1]: ValueNode<Int64Imm> 1}
#   7: construct.18:[CNode]45{[0]: ValueNode<FuncGraph> ms_len.46, [1]: [CNode]44}
#   8: construct.18:[CNode]37{[0]: ValueNode<FuncGraph> ⤾construct.19, [1]: ValueNode<Int64Imm> 0, [2]: ValueNode<ValueList> []}
#   9: construct.18:[CNode]38{[0]: ValueNode<Primitive> Return, [1]: [CNode]37}


# [No.3] ⤾construct.19
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/
funcgraph fg_19[fg_18](
        %para29 : I64    # @[CNode]20
        , %para30 : List[]    # Φouts
    ) {
    %1 : $(construct.18):Tuple[I64] = DoSignaturePrimitive::S-Prim-make_range{prim_type=1}(I64(1))    #(I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]44
    %2 : $(construct.18):I64 = FuncGraph::fg_46(%1)    #(Tuple[I64])    # fg_46=ms_len.46 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]45
    %3 : Bool = MultitypeFuncGraph::less{(Tensor, Number), (Number, Tensor), (Number, Number), (Tensor, Tensor)}(%para29, %2)    #(I64, I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]47
    %4 : Func = Primitive::Switch{prim_type=1}(%3, FuncGraph::fg_21, FuncGraph::fg_48)    #(Bool, Func, Func)    # fg_21=⥁construct.21, fg_48=↓construct.48 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]49

#------------------------> 2
    %5 = %4() #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]50
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]51
}
# order:
#   1: ⤾construct.19:[CNode]47{[0]: ValueNode<MultitypeFuncGraph> less.52, [1]: @[CNode]20, [2]: [CNode]45}
#   2: ⤾construct.19:[CNode]49{[0]: ValueNode<Primitive> Switch, [1]: [CNode]47, [2]: ValueNode<FuncGraph> ⥁construct.21, [3]: ValueNode<FuncGraph> ↓construct.48}
#   3: ⤾construct.19:[CNode]50{[0]: [CNode]49}
#   4: ⤾construct.19:[CNode]51{[0]: ValueNode<Primitive> Return, [1]: [CNode]50}


# [No.4] ⥁construct.21
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/
funcgraph fg_21[fg_19](
) {
    %1 = MultitypeFuncGraph::add{(Tuple, Tuple), (RowTensor, Tensor), (Tensor, Tensor), (List, List), (Tensor, List), (List, Tensor), (String, String), (Tuple, Tensor), (NoneType, NoneType), (Number, Number), (Number, Tensor), (Tensor, Number), (Tensor, Tuple)}(%para29, I64(1))    #(Undefined, I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]20
    %2 = Primitive::stop_gradient{prim_type=1}(%1)    #(Undefined) #scope: Default
#[CNode]53
    %3 = Primitive::getattr{prim_type=1}(%para30, "append")    #(Undefined, String) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(245)/            outs.append(tmp)/#[CNode]54
    %4 = ClassType(I64(1))    #(I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(240)/            con = ops.Concat(1)/#con
    %5 = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_55)    #(Func)    # fg_55=construct.55 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]56
    %6 : $(construct.18):Tuple[I64] = DoSignaturePrimitive::S-Prim-make_range{prim_type=1}(I64(1))    #(I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]44
    %7 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, %para29)    #(Tuple[I64], Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#i
    %8 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%5, %7)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]57
    %9 = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_58)    #(Func)    # fg_58=construct.58 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(242)/            tmp = self.fusion[i](tmp)/#[CNode]59
    %10 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%9, %7)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(242)/            tmp = self.fusion[i](tmp)/#[CNode]60

#------------------------> 3
    %11 = $(construct.18):FuncGraph::fg_22()    # fg_22=G-construct.22 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(238)/            a = proj_cls_token[i]/#Φproj_cls_token
    %12 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%11, %7)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(238)/            a = proj_cls_token[i]/#a
    %13 = $(construct.18):FuncGraph::fg_23()    # fg_23=G-construct.23 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#Φouts_b
    %14 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%7, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]61
    %15 = DoSignaturePrimitive::S-Prim-mod{prim_type=1}(%14, I64(1))    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]62
    %16 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, %15)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]63
    %17 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]64
    %18 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(I64(1), None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]65
    %19 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%17, %18, Ellipsis[Ellipsis])    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#[CNode]66
    %20 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%16, %19)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#b
    %21 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%12, %20)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(241)/            tmp = con((a, b))/#[CNode]67
    %22 = %4(%21)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(241)/            tmp = con((a, b))/#tmp
    %23 = %10(%22)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(242)/            tmp = self.fusion[i](tmp)/#tmp
    %24 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]68
    %25 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(I64(0), I64(1), None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]69
    %26 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%24, %25, Ellipsis[Ellipsis])    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]70
    %27 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%23, %26)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#[CNode]71
    %28 = %8(%27)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(243)/            reverted_proj_cls_token = self.revert_projs[i](tmp[:, 0:1, ...])/#reverted_proj_cls_token
    %29 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, %7)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]72
    %30 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]73
    %31 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(I64(1), None, None)    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]74
    %32 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%30, %31, Ellipsis[Ellipsis])    #(Undefined, Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]75
    %33 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%29, %32)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]76
    %34 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%28, %33)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#[CNode]77
    %35 = %4(%34)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(244)/            tmp = con((reverted_proj_cls_token, outs_b[i][:, 1:, ...]))/#tmp
    %36 = %3(%35)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(245)/            outs.append(tmp)/#outs
    %37 = FuncGraph::fg_19(%1, %36)    #(Undefined, Undefined)    # fg_19=⤾construct.19 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]78
    %38 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%37, %2)    #(Undefined, Undefined) #scope: Default
#[CNode]79
    Primitive::Return{prim_type=1}(%38)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(237)/        for i in range(self.num_branches):/#[CNode]80
}
# order:
#   1: ⥁construct.21:i{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]44, [2]: @[CNode]20}
#   2: ⥁construct.21:[CNode]20{[0]: ValueNode<MultitypeFuncGraph> add.14, [1]: @[CNode]20, [2]: ValueNode<Int64Imm> 1}
#   3: ⥁construct.21:a{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: Φproj_cls_token, [2]: i}
#   4: ⥁construct.21:[CNode]61{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: i, [2]: ValueNode<Int64Imm> 1}
#   5: ⥁construct.21:[CNode]62{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mod, [1]: [CNode]61, [2]: ValueNode<Int64Imm> 1}
#   6: ⥁construct.21:[CNode]63{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: Φouts_b, [2]: [CNode]62}
#   7: ⥁construct.21:[CNode]64{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#   8: ⥁construct.21:[CNode]65{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<Int64Imm> 1, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#   9: ⥁construct.21:[CNode]66{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]64, [2]: [CNode]65, [3]: ValueNode<Ellipsis> Ellipsis}
#  10: ⥁construct.21:b{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]63, [2]: [CNode]66}
#  11: ⥁construct.21:con{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Concat', [1]: ValueNode<Int64Imm> 1}
#  12: ⥁construct.21:[CNode]67{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: a, [2]: b}
#  13: ⥁construct.21:tmp{[0]: con, [1]: [CNode]67}
#  14: ⥁construct.21:[CNode]60{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]59, [2]: i}
#  15: ⥁construct.21:tmp{[0]: [CNode]60, [1]: tmp}
#  16: ⥁construct.21:[CNode]57{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]56, [2]: i}
#  17: ⥁construct.21:[CNode]68{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#  18: ⥁construct.21:[CNode]69{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<Int64Imm> 0, [2]: ValueNode<Int64Imm> 1, [3]: ValueNode<None> None}
#  19: ⥁construct.21:[CNode]70{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]68, [2]: [CNode]69, [3]: ValueNode<Ellipsis> Ellipsis}
#  20: ⥁construct.21:[CNode]71{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: tmp, [2]: [CNode]70}
#  21: ⥁construct.21:reverted_proj_cls_token{[0]: [CNode]57, [1]: [CNode]71}
#  22: ⥁construct.21:[CNode]72{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: Φouts_b, [2]: i}
#  23: ⥁construct.21:[CNode]73{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#  24: ⥁construct.21:[CNode]74{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<Int64Imm> 1, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#  25: ⥁construct.21:[CNode]75{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]73, [2]: [CNode]74, [3]: ValueNode<Ellipsis> Ellipsis}
#  26: ⥁construct.21:[CNode]76{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]72, [2]: [CNode]75}
#  27: ⥁construct.21:[CNode]77{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: reverted_proj_cls_token, [2]: [CNode]76}
#  28: ⥁construct.21:tmp{[0]: con, [1]: [CNode]77}
#  29: ⥁construct.21:[CNode]54{[0]: ValueNode<Primitive> getattr, [1]: Φouts, [2]: ValueNode<StringImm> append}
#  30: ⥁construct.21:outs{[0]: [CNode]54, [1]: tmp}
#  31: ⥁construct.21:[CNode]78{[0]: ValueNode<FuncGraph> ⤾construct.19, [1]: [CNode]20, [2]: outs}
#  32: ⥁construct.21:[CNode]80{[0]: ValueNode<Primitive> Return, [1]: [CNode]79}


# [No.5] G-construct.22
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/
funcgraph fg_22[fg_18](
) {

#------------------------> 4
    %1 = $(construct.18):FuncGraph::fg_23()    # fg_23=G-construct.23 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(239)/            b = outs_b[(i + 1) % self.num_branches][:, 1:, ...]/#Φouts_b
    %2 = $(construct.18):Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_81)    #(Undefined)    # fg_81=construct.81 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/#[CNode]43
    %3 = $(construct.18):DoSignaturePrimitive::S-Prim-zip_operation{prim_type=1}(%1, %2)    #(Undefined, Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/#[CNode]42
    %4 = FuncGraph::fg_82(%3)    #(Undefined)    # fg_82=ms_iter.82 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/#[CNode]83
    %5 = FuncGraph::fg_84(%4, [])    #(Undefined, Undefined)    # fg_84=⤾construct.84 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/#[CNode]85
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(234)/        proj_cls_token = [proj(x[:, 0:1]) for x, proj in zip(outs_b, self.projs)]/#[CNode]86
}
# order:
#   1: G-construct.22:[CNode]83{[0]: ValueNode<FuncGraph> ms_iter.82, [1]: [CNode]42}
#   2: G-construct.22:[CNode]85{[0]: ValueNode<FuncGraph> ⤾construct.84, [1]: [CNode]83, [2]: ValueNode<ValueList> []}
#   3: G-construct.22:[CNode]86{[0]: ValueNode<Primitive> Return, [1]: [CNode]85}


# [No.6] G-construct.23
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/
funcgraph fg_23[fg_18](
) {
    %1 : $(construct.18):List[Tensor(F32)] = DoSignaturePrimitive::S-Prim-make_list{prim_type=1}(%para28)    #(Tensor(F32)[3, 3, 192, 192]) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]39
    %2 : $(construct.18):Tuple[Func] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_27)    #(Func)    # fg_27=construct.27 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]41
    %3 : $(construct.18):Tuple[Tuple[Tensor(F32),Func]] = DoSignaturePrimitive::S-Prim-zip_operation{prim_type=1}(%1, %2)    #(List[Tensor(F32)], Tuple[Func]) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]40
    %4 : Tuple[Tuple[Tensor(F32),Func]] = FuncGraph::fg_82(%3)    #(Tuple[Tuple[Tensor(F32),Func]])    # fg_82=ms_iter.82 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]87

#------------------------> 5
    %5 = FuncGraph::fg_24(%4, [])    #(Tuple[Tuple[Tensor(F32),Func]], List[])    # fg_24=⤾construct.24 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]88
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]89
}
# order:
#   1: G-construct.23:[CNode]87{[0]: ValueNode<FuncGraph> ms_iter.82, [1]: [CNode]40}
#   2: G-construct.23:[CNode]88{[0]: ValueNode<FuncGraph> ⤾construct.24, [1]: [CNode]87, [2]: ValueNode<ValueList> []}
#   3: G-construct.23:[CNode]89{[0]: ValueNode<Primitive> Return, [1]: [CNode]88}


# [No.7] ⤾construct.24
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/
funcgraph fg_24(
        %para31 : Tuple[Tuple[Tensor(F32),Func]]    # iter
        , %para32 : List[]    # list
    ) {
    %1 : Bool = FuncGraph::fg_90(%para31)    #(Tuple[Tuple[Tensor(F32),Func]])    # fg_90=hasnext.90 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]91
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_25, FuncGraph::fg_92)    #(Bool, Func, Func)    # fg_25=⥁construct.25, fg_92=↓construct.92 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]93

#------------------------> 6
    %3 = %2() #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]94
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]95
}
# order:
#   1: ⤾construct.24:[CNode]91{[0]: ValueNode<FuncGraph> hasnext.90, [1]: iter}
#   2: ⤾construct.24:[CNode]93{[0]: ValueNode<Primitive> Switch, [1]: [CNode]91, [2]: ValueNode<FuncGraph> ⥁construct.25, [3]: ValueNode<FuncGraph> ↓construct.92}
#   3: ⤾construct.24:[CNode]94{[0]: [CNode]93}
#   4: ⤾construct.24:[CNode]95{[0]: ValueNode<Primitive> Return, [1]: [CNode]94}


# [No.8] ⥁construct.25
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/
funcgraph fg_25[fg_24](
) {
    %1 : Tuple[Tuple[Tensor(F32),Func],Tuple[]] = FuncGraph::fg_96(%para31)    #(Tuple[Tuple[Tensor(F32),Func]])    # fg_96=ms_next.96 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]97
    %2 : Tuple[] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(1))    #(Tuple[Tuple[Tensor(F32),Func],Tuple[]], I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]98
    %3 : Func = Primitive::Switch{prim_type=1}(Bool(1), FuncGraph::fg_26, FuncGraph::fg_99)    #(Bool, Func, Func)    # fg_26=✓⥁construct.26, fg_99=✗⥁construct.99 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]100

#------------------------> 7
    %4 = %3() #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]101
    %5 = FuncGraph::fg_24(%2, %4)    #(Tuple[], Undefined)    # fg_24=⤾construct.24 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]102
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]103
}
# order:
#   1: ⥁construct.25:[CNode]97{[0]: ValueNode<FuncGraph> ms_next.96, [1]: iter}
#   2: ⥁construct.25:[CNode]104{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]97, [2]: ValueNode<Int64Imm> 0}
#   3: ⥁construct.25:[CNode]98{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]97, [2]: ValueNode<Int64Imm> 1}
#   4: ⥁construct.25:x_{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]104, [2]: ValueNode<Int64Imm> 0}
#   5: ⥁construct.25:block{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]104, [2]: ValueNode<Int64Imm> 1}
#   6: ⥁construct.25:[CNode]105{[0]: block, [1]: x_}
#   7: ⥁construct.25:[CNode]106{[0]: ValueNode<Primitive> list_append, [1]: list, [2]: [CNode]105}
#   8: ⥁construct.25:[CNode]100{[0]: ValueNode<Primitive> Switch, [1]: ValueNode<BoolImm> true, [2]: ValueNode<FuncGraph> ✓⥁construct.26, [3]: ValueNode<FuncGraph> ✗⥁construct.99}
#   9: ⥁construct.25:[CNode]101{[0]: [CNode]100}
#  10: ⥁construct.25:[CNode]102{[0]: ValueNode<FuncGraph> ⤾construct.24, [1]: [CNode]98, [2]: [CNode]101}
#  11: ⥁construct.25:[CNode]103{[0]: ValueNode<Primitive> Return, [1]: [CNode]102}


# [No.9] ✓⥁construct.26
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/
funcgraph fg_26[fg_25](
) {
    %1 : $(⥁construct.25):Tuple[Tuple[Tensor(F32),Func],Tuple[]] = FuncGraph::fg_96(%para31)    #(Tuple[Tuple[Tensor(F32),Func]])    # fg_96=ms_next.96 #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]97
    %2 : $(⥁construct.25):Tuple[Tensor(F32),Func] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(0))    #(Tuple[Tuple[Tensor(F32),Func],Tuple[]], I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]104
    %3 : $(⥁construct.25):Func = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(1))    #(Tuple[Tensor(F32),Func], I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#block
    %4 : $(⥁construct.25):Tensor(F32)[3, 3, 192, 192] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, I64(0))    #(Tuple[Tensor(F32),Func], I64) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#x_

#------------------------> 8
    %5 = $(⥁construct.25):%3(%4)    #(Tensor(F32)[3, 3, 192, 192]) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]105
    %6 = $(⥁construct.25):Primitive::list_append{prim_type=1}(%para32, %5)    #(List[], Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]106
    Primitive::Return{prim_type=1}(%6)    #(Undefined) #scope: Default
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]107
}
# order:
#   1: ✓⥁construct.26:[CNode]107{[0]: ValueNode<Primitive> Return, [1]: [CNode]106}


# [No.10] construct.27
# In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(274)/    def construct(self, input_data):/
funcgraph fg_27[fg_1](
        %para33 : Tensor(F32)[3, 3, 192, 192]    # input_data
    ) {

#------------------------> 9
    %1 = FuncGraph::fg_28(I64(0), %para33)    #(I64, Tensor(F32)[3, 3, 192, 192])    # fg_28=⤾construct.28 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]108
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]109
}
# order:
#   1: construct.27:[CNode]110{[0]: ValueNode<FuncGraph> ms_len.46, [1]: [CNode]111}
#   2: construct.27:[CNode]108{[0]: ValueNode<FuncGraph> ⤾construct.28, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: construct.27:[CNode]109{[0]: ValueNode<Primitive> Return, [1]: [CNode]108}


# [No.11] ⤾construct.28
# In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/
funcgraph fg_28[fg_27](
        %para34 : I64    # @[CNode]29
        , %para35 : Tensor(F32)[3, 3, 192, 192]    # Φinput_data
    ) {
    %1 : $(construct.27):Tuple[Func] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_31)    #(Func)    # fg_31=construct.31 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]111
    %2 : $(construct.27):I64 = FuncGraph::fg_46(%1)    #(Tuple[Func])    # fg_46=ms_len.46 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]110
    %3 : Bool = MultitypeFuncGraph::less{(Tensor, Number), (Number, Tensor), (Number, Number), (Tensor, Tensor)}(%para34, %2)    #(I64, I64) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]112
    %4 : Func = Primitive::Switch{prim_type=1}(%3, FuncGraph::fg_30, FuncGraph::fg_113)    #(Bool, Func, Func)    # fg_30=⥁construct.30, fg_113=↓construct.113 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]114

#------------------------> 10
    %5 = %4() #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]115
    Primitive::Return{prim_type=1}(%5)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]116
}
# order:
#   1: ⤾construct.28:[CNode]112{[0]: ValueNode<MultitypeFuncGraph> less.52, [1]: @[CNode]29, [2]: [CNode]110}
#   2: ⤾construct.28:[CNode]114{[0]: ValueNode<Primitive> Switch, [1]: [CNode]112, [2]: ValueNode<FuncGraph> ⥁construct.30, [3]: ValueNode<FuncGraph> ↓construct.113}
#   3: ⤾construct.28:[CNode]115{[0]: [CNode]114}
#   4: ⤾construct.28:[CNode]116{[0]: ValueNode<Primitive> Return, [1]: [CNode]115}


# [No.12] ⥁construct.30
# In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/
funcgraph fg_30[fg_28](
) {
    %1 : I64 = MultitypeFuncGraph::add{(Tuple, Tuple), (RowTensor, Tensor), (Tensor, Tensor), (List, List), (Tensor, List), (List, Tensor), (String, String), (Tuple, Tensor), (NoneType, NoneType), (Number, Number), (Number, Tensor), (Tensor, Number), (Tensor, Tuple)}(%para34, I64(1))    #(I64, I64) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]29
    %2 : I64 = Primitive::stop_gradient{prim_type=1}(%1)    #(I64) #scope: Default/blocks-CellList/0-SequentialCell
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]117
    %3 : $(construct.27):Tuple[Func] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_31)    #(Func)    # fg_31=construct.31 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]111
    %4 : Func = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%3, %para34)    #(Tuple[Func], I64) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#cell

#------------------------> 11
    %5 = %4(%para35)    #(Tensor(F32)[3, 3, 192, 192]) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(276)/            input_data = cell(input_data)/#input_data
    %6 = FuncGraph::fg_28(%1, %5)    #(I64, Undefined)    # fg_28=⤾construct.28 #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]118
    %7 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%6, %2)    #(Undefined, I64) #scope: Default/blocks-CellList/0-SequentialCell
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\new2.py(232)/        outs_b = [block(x_) for x_, block in zip([x, ], self.blocks)]  # 虽然我不知道对不对，但是通过celllist直接添加类，并且加上名字能运行/#[CNode]119
    Primitive::Return{prim_type=1}(%7)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\nn\layer\container.py(275)/        for cell in self.cell_list:/#[CNode]120
}
# order:
#   1: ⥁construct.30:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]111, [2]: @[CNode]29}
#   2: ⥁construct.30:[CNode]29{[0]: ValueNode<MultitypeFuncGraph> add.14, [1]: @[CNode]29, [2]: ValueNode<Int64Imm> 1}
#   3: ⥁construct.30:input_data{[0]: cell, [1]: Φinput_data}
#   4: ⥁construct.30:[CNode]118{[0]: ValueNode<FuncGraph> ⤾construct.28, [1]: [CNode]29, [2]: input_data}
#   5: ⥁construct.30:[CNode]120{[0]: ValueNode<Primitive> Return, [1]: [CNode]119}


# [No.13] construct.31
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(59)/    def construct(self, x):/
funcgraph fg_31[fg_1](
        %para36 : Tensor(F32)[3, 3, 192, 192]    # x
    ) {
    %1 : Tensor(F32)[3, 3, 192, 192] = FuncGraph::fg_121(%para36)    #(Tensor(F32)[3, 3, 192, 192])    # fg_121=construct.121 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(60)/        x = x + self.drop_path(self.attn(self.norm1(x)))/#[CNode]122

#------------------------> 12
    %2 = FuncGraph::fg_32(%1)    #(Tensor(F32)[3, 3, 192, 192])    # fg_32=construct.32 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(60)/        x = x + self.drop_path(self.attn(self.norm1(x)))/#[CNode]123
    %3 = FuncGraph::fg_124(%2)    #(Undefined)    # fg_124=construct.124 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(60)/        x = x + self.drop_path(self.attn(self.norm1(x)))/#[CNode]125
    %4 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%para36, %3)    #(Tensor(F32)[3, 3, 192, 192], Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(60)/        x = x + self.drop_path(self.attn(self.norm1(x)))/#x
    %5 = FuncGraph::fg_126(%4)    #(Undefined)    # fg_126=construct.126 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(61)/        x = x + self.drop_path(self.mlp(self.norm2(x)))/#[CNode]127
    %6 = FuncGraph::fg_128(%5)    #(Undefined)    # fg_128=construct.128 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(61)/        x = x + self.drop_path(self.mlp(self.norm2(x)))/#[CNode]129
    %7 = FuncGraph::fg_124(%6)    #(Undefined)    # fg_124=construct.124 #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(61)/        x = x + self.drop_path(self.mlp(self.norm2(x)))/#[CNode]130
    %8 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%4, %7)    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(61)/        x = x + self.drop_path(self.mlp(self.norm2(x)))/#x
    Primitive::Return{prim_type=1}(%8)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(63)/        return x/#[CNode]131
}
# order:
#   1: construct.31:[CNode]122{[0]: ValueNode<FuncGraph> construct.121, [1]: x}
#   2: construct.31:[CNode]123{[0]: ValueNode<FuncGraph> construct.32, [1]: [CNode]122}
#   3: construct.31:[CNode]125{[0]: ValueNode<FuncGraph> construct.124, [1]: [CNode]123}
#   4: construct.31:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: x, [2]: [CNode]125}
#   5: construct.31:[CNode]127{[0]: ValueNode<FuncGraph> construct.126, [1]: x}
#   6: construct.31:[CNode]129{[0]: ValueNode<FuncGraph> construct.128, [1]: [CNode]127}
#   7: construct.31:[CNode]130{[0]: ValueNode<FuncGraph> construct.124, [1]: [CNode]129}
#   8: construct.31:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: x, [2]: [CNode]130}
#   9: construct.31:[CNode]131{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.14] construct.32
# In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(20)/    def construct(self, x):/
funcgraph fg_32[fg_1](
        %para37 : Tensor(F32)[3, 3, 192, 192]    # x
    ) {
    %1 : Func = ClassType() #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(33)/        batchmatual2=ops.BatchMatMul()/#batchmatual2
    %2 : Func = ClassType() #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(29)/        softmax = nn.Softmax()/#softmax
    %3 : Tuple[String] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}("transpose_b")    #(String) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(27)/        batchmatual = ops.BatchMatMul(transpose_b=True)/#[CNode]132
    %4 : Tuple[Bool] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(Bool(1))    #(Bool) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(27)/        batchmatual = ops.BatchMatMul(transpose_b=True)/#[CNode]133
    %5 : Dictionary[[transpose_b,],[Bool]] = DoSignaturePrimitive::S-Prim-make_dict{prim_type=1}(%3, %4)    #(Tuple[String], Tuple[Bool]) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(27)/        batchmatual = ops.BatchMatMul(transpose_b=True)/#[CNode]134
    %6 : Func = UnpackCall::unpack_call(ClassType, %5)    #(Func, Dictionary[[transpose_b,],[Bool]]) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(27)/        batchmatual = ops.BatchMatMul(transpose_b=True)/#batchmatual
    %7 : Tensor(F32)[3, 3, 192, 576] = FuncGraph::fg_135(%para37)    #(Tensor(F32)[3, 3, 192, 192])    # fg_135=construct.135 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(22)/        qkv = self.qkv(x)/#qkv
    %8 : Func = Primitive::getattr{prim_type=1}(%7, "reshape")    #(Tensor(F32)[3, 3, 192, 576], String) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(23)/        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads)/#[CNode]136
    %9 : Tuple[I64*4] = Primitive::getattr{prim_type=1}(%para37, "shape")    #(Tensor(F32)[3, 3, 192, 192], String) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(21)/        B, N, C = x.shape/#[CNode]137
    %10 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%9, I64(0))    #(Tuple[I64*4], I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(21)/        B, N, C = x.shape/#B
    %11 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%9, I64(1))    #(Tuple[I64*4], I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(21)/        B, N, C = x.shape/#N
    %12 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%9, I64(2))    #(Tuple[I64*4], I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(21)/        B, N, C = x.shape/#C
    %13 : I64 = DoSignaturePrimitive::S-Prim-floordiv{prim_type=1}(%12, I64(6))    #(I64, I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(23)/        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads)/#[CNode]138

#------------------------> 13
    %14 = %8(%10, %11, I64(3), I64(6), %13)    #(I64, I64, I64, I64, I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(23)/        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads)/#qkv
    %15 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(I64(2), I64(0), I64(3), I64(1), I64(4))    #(Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(24)/        qkv = ops.transpose(qkv, (2, 0, 3, 1, 4))/#[CNode]139
    %16 = FuncGraph::fg_140(%14, %15)    #(Undefined, Undefined)    # fg_140=transpose.140 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(24)/        qkv = ops.transpose(qkv, (2, 0, 3, 1, 4))/#qkv
    %17 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%16, I64(0))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#[CNode]141
    %18 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%16, I64(1))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#[CNode]142
    %19 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%16, I64(2))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#[CNode]143
    %20 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%17, %18, %19)    #(Undefined, Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#[CNode]144
    %21 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(0))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#q
    %22 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(1))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#k
    %23 = %6(%21, %22)    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(28)/        attn = batchmatual(q, k) * self.scale/#[CNode]145
    %24 = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%23, F32(0.176777))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(28)/        attn = batchmatual(q, k) * self.scale/#attn
    %25 = %2(%24)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(30)/        attn = softmax(attn)/#attn
    %26 = FuncGraph::fg_146(%25)    #(Undefined)    # fg_146=construct.146 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(31)/        attn = self.attn_drop(attn)/#attn
    %27 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%20, I64(2))    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(25)/        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)/#v
    %28 = %1(%26, %27)    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(34)/        x=batchmatual2(attn,v)/#x
    %29 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(I64(0), I64(2), I64(1), I64(3))    #(Undefined, Undefined, Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(35)/        x = ops.transpose(x, (0, 2, 1, 3))/#[CNode]147
    %30 = FuncGraph::fg_140(%28, %29)    #(Undefined, Undefined)    # fg_140=transpose.140 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(35)/        x = ops.transpose(x, (0, 2, 1, 3))/#x
    %31 = Primitive::getattr{prim_type=1}(%30, "reshape")    #(Undefined, Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(36)/        x = x.reshape(B, N, C)/#[CNode]148
    %32 = %31(%10, %11, %12)    #(I64, I64, I64) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(36)/        x = x.reshape(B, N, C)/#x
    %33 = FuncGraph::fg_149(%32)    #(Undefined)    # fg_149=construct.149 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(37)/        x = self.proj(x)/#x
    %34 = FuncGraph::fg_150(%33)    #(Undefined)    # fg_150=construct.150 #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(38)/        x = self.proj_drop(x)/#x
    Primitive::Return{prim_type=1}(%34)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file C:\Users\zhao1\PycharmProjects\crossvitms\models\Block.py(39)/        return x/#[CNode]151
}
# order:
#   1: construct.32:[CNode]137{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> shape}
#   2: construct.32:B{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]137, [2]: ValueNode<Int64Imm> 0}
#   3: construct.32:N{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]137, [2]: ValueNode<Int64Imm> 1}
#   4: construct.32:C{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]137, [2]: ValueNode<Int64Imm> 2}
#   5: construct.32:qkv{[0]: ValueNode<FuncGraph> construct.135, [1]: x}
#   6: construct.32:[CNode]136{[0]: ValueNode<Primitive> getattr, [1]: qkv, [2]: ValueNode<StringImm> reshape}
#   7: construct.32:[CNode]138{[0]: ValueNode<DoSignaturePrimitive> S-Prim-floordiv, [1]: C, [2]: ValueNode<Int64Imm> 6}
#   8: construct.32:qkv{[0]: [CNode]136, [1]: B, [2]: N, [3]: ValueNode<Int64Imm> 3, [4]: ValueNode<Int64Imm> 6, [5]: [CNode]138}
#   9: construct.32:[CNode]139{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 2, [2]: ValueNode<Int64Imm> 0, [3]: ValueNode<Int64Imm> 3, [4]: ValueNode<Int64Imm> 1, [5]: ValueNode<Int64Imm> 4}
#  10: construct.32:qkv{[0]: ValueNode<FuncGraph> transpose.140, [1]: qkv, [2]: [CNode]139}
#  11: construct.32:[CNode]141{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: qkv, [2]: ValueNode<Int64Imm> 0}
#  12: construct.32:[CNode]142{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: qkv, [2]: ValueNode<Int64Imm> 1}
#  13: construct.32:[CNode]143{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: qkv, [2]: ValueNode<Int64Imm> 2}
#  14: construct.32:[CNode]144{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]141, [2]: [CNode]142, [3]: [CNode]143}
#  15: construct.32:q{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]144, [2]: ValueNode<Int64Imm> 0}
#  16: construct.32:k{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]144, [2]: ValueNode<Int64Imm> 1}
#  17: construct.32:v{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]144, [2]: ValueNode<Int64Imm> 2}
#  18: construct.32:[CNode]132{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> transpose_b}
#  19: construct.32:[CNode]133{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<BoolImm> true}
#  20: construct.32:[CNode]134{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]132, [2]: [CNode]133}
#  21: construct.32:batchmatual{[0]: ValueNode<UnpackCall> unpack_call.152, [1]: ValueNode<ClassType> class 'mindspore.ops.operations.math_ops.BatchMatMul', [2]: [CNode]134}
#  22: construct.32:[CNode]145{[0]: batchmatual, [1]: q, [2]: k}
#  23: construct.32:attn{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: [CNode]145, [2]: ValueNode<FP32Imm> 0.176777}
#  24: construct.32:softmax{[0]: ValueNode<ClassType> class 'mindspore.nn.layer.activation.Softmax'}
#  25: construct.32:attn{[0]: softmax, [1]: attn}
#  26: construct.32:attn{[0]: ValueNode<FuncGraph> construct.146, [1]: attn}
#  27: construct.32:batchmatual2{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.math_ops.BatchMatMul'}
#  28: construct.32:x{[0]: batchmatual2, [1]: attn, [2]: v}
#  29: construct.32:[CNode]147{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 0, [2]: ValueNode<Int64Imm> 2, [3]: ValueNode<Int64Imm> 1, [4]: ValueNode<Int64Imm> 3}
#  30: construct.32:x{[0]: ValueNode<FuncGraph> transpose.140, [1]: x, [2]: [CNode]147}
#  31: construct.32:[CNode]148{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> reshape}
#  32: construct.32:x{[0]: [CNode]148, [1]: B, [2]: N, [3]: C}
#  33: construct.32:x{[0]: ValueNode<FuncGraph> construct.149, [1]: x}
#  34: construct.32:x{[0]: ValueNode<FuncGraph> construct.150, [1]: x}
#  35: construct.32:[CNode]151{[0]: ValueNode<Primitive> Return, [1]: x}


# [No.15] reshape.33
# In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(302)/def reshape(x, *shape):/
funcgraph fg_33(
        %para38 : Tensor(F32)[3, 3, 192, 576]    # x
        , %para39 : I64    # shape0
        , %para40 : I64    # shape1
        , %para41 : I64    # shape2
        , %para42 : I64    # shape3
        , %para43 : I64    # shape4
    ) {
    %1 : ExternalType = Primitive::resolve{prim_type=1}(NameSpace::SymbolStr, F)    #(ExternalType, ExternalType) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(333)/    return F.reshape(x, new_shape)/#[CNode]153
    %2 : Func = Primitive::getattr{prim_type=1}(%1, "reshape")    #(ExternalType, String) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(333)/    return F.reshape(x, new_shape)/#[CNode]154
    %3 : Func = Primitive::resolve{prim_type=1}(NameSpace::SymbolStr, check_reshape_shp_const)    #(ExternalType, ExternalType) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(332)/    new_shape = check_reshape_shp_const(shape)/#[CNode]155
    %4 : Tuple[I64*5] = Primitive::MakeTuple{prim_type=1}(%para39, %para40, %para41, %para42, %para43)    #(I64, I64, I64, I64, I64) #scope: Default
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(302)/def reshape(x, *shape):/#[CNode]156
    %5 : Tuple[I64*5] = %3(%4)    #(Tuple[I64*5]) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(332)/    new_shape = check_reshape_shp_const(shape)/#new_shape

#------------------------> 14
    %6 = %2(%para38, %5)    #(Tensor(F32)[3, 3, 192, 576], Tuple[I64*5]) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(333)/    return F.reshape(x, new_shape)/#[CNode]157
    Primitive::Return{prim_type=1}(%6)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\_extends\parse\standard_method.py(333)/    return F.reshape(x, new_shape)/#[CNode]158
}
# order:
#   1: reshape.17:[CNode]159{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> MakeTuple}
#   2: reshape.17:[CNode]160{[0]: [CNode]159, [1]: shape}
#   3: reshape.33:new_shape{[0]: [CNode]155, [1]: [CNode]156}
#   4: reshape.17:[CNode]161{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> MakeTuple}
#   5: reshape.17:[CNode]162{[0]: [CNode]161, [1]: x, [2]: new_shape}
#   6: reshape.33:[CNode]157{[0]: [CNode]154, [1]: x, [2]: new_shape}
#   7: reshape.33:[CNode]158{[0]: ValueNode<Primitive> Return, [1]: [CNode]157}


# [No.16] reshape.34
# In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\ops\function\array_func.py(826)/def reshape(input_x, input_shape):/
funcgraph fg_34(
        %para44 : Tensor(F32)[3, 3, 192, 576]    # input_x
        , %para45 : Tuple[I64*5]    # input_shape
    ) {
    %1 : Func = Primitive::resolve{prim_type=1}(NameSpace::SymbolStr, reshape_)    #(ExternalType, ExternalType) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\ops\function\array_func.py(857)/    return reshape_(input_x, input_shape)/#[CNode]163

#------------------------> 15
    %2 = %1(%para44, %para45)    #(Tensor(F32)[3, 3, 192, 576], Tuple[I64*5]) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\ops\function\array_func.py(857)/    return reshape_(input_x, input_shape)/#[CNode]164
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/blocks-CellList/0-SequentialCell/0-Block/attn-Attention
      # In file F:\anaconda3\envs\mindspore1.7_py39\lib\site-packages\mindspore\ops\function\array_func.py(857)/    return reshape_(input_x, input_shape)/#[CNode]165
}
# order:
#   1: reshape.34:[CNode]166{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> MakeTuple}
#   2: reshape.34:[CNode]167{[0]: [CNode]166, [1]: input_x, [2]: input_shape}
#   3: reshape.34:[CNode]164{[0]: [CNode]163, [1]: input_x, [2]: input_shape}
#   4: reshape.34:[CNode]165{[0]: ValueNode<Primitive> Return, [1]: [CNode]164}


#===============================================================================
# num of function graphs in stack: 16/17 (Ignored 1 internal frames).
